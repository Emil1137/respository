# -*- coding: utf-8 -*-
"""Evidencia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HkCd_mn8l1tlL-kFjVNRD9hJaRIO7I5I
"""

from google.colab import files
uploaded = files.upload()

from google.colab import drive
drive.mount('/content/drive')



import cv2
import numpy as np
import matplotlib.pyplot as plt
import random #esta libreria hace que se puedan elegir numeros aleatorios


def seleccionar_img():
  """esta funcion selecciona la imagen que se usara al azar"""

  num = random.randint(1, 8)
  if num == 1:
    img = cv2.imread('tomate1.png')
  elif num == 2:
    img = cv2.imread('tomate2.png')
  elif num == 3:
    img = cv2.imread('tomate3.png')
  elif num == 4:
    img = cv2.imread('tomate4.png')
  elif num == 5:
    img = cv2.imread('platano1.png')
  elif num == 6:
    img = cv2.imread('platano2.png')
  elif num == 7:
    img = cv2.imread('platano3.png')
  elif num == 8:
    img = cv2.imread('platano4.png')
  return img


img = seleccionar_img() #se hace al azar para simular una situacion real

img_rgb = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)     #convertir de bgr a rgb
img_gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)   #convertir de bgr a gray
img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)    #convierte bgr a hsv


def hacer_y_plotear_mascaras(img_hsv,img_rgb,img_gray,img):
  """esta funcion hace las mascaras y las plotea"""

  lower_yellow = np.array([20, 120, 120])
  upper_yellow = np.array([34, 255, 255])

  lower_green= np.array([35, 50, 50])
  upper_green = np.array([85, 255, 255])

  lower_red = np.array([0, 150, 100])
  upper_red = np.array([10, 255, 255])

  mask_yellow = cv2.inRange(img_hsv, lower_yellow, upper_yellow)
  img_filtro_amarillo = cv2.bitwise_and(img_hsv,img_hsv,mask=mask_yellow)

  mask_red = cv2.inRange(img_hsv, lower_red, upper_red)
  img_filtro_rojo = cv2.bitwise_and(img_hsv,img_hsv,mask=mask_red)

  mask_green = cv2.inRange(img_hsv, lower_green, upper_green)
  img_filtro_verde = cv2.bitwise_and(img_hsv,img_hsv,mask=mask_green)


  plt.figure(figsize=(15,5))

  plt.subplot(2,3,1)
  plt.imshow(img_rgb)
  plt.axis('off')
  plt.title('Imagen original')

  plt.subplot(2,3,2)
  plt.imshow(img_gray, cmap = "gray")
  plt.axis('off')
  plt.title('Fruta con el filtro gris')

  plt.subplot(2,3,3)
  plt.imshow(cv2.cvtColor(img_hsv, cv2.COLOR_HSV2RGB))
  plt.axis('off')
  plt.title('Imagen original HSV')

  plt.subplot(2,3,4)
  plt.imshow(cv2.cvtColor(img_filtro_amarillo, cv2.COLOR_HSV2RGB))
  plt.axis('off')
  plt.title('Imagen con filtro amarillo')

  plt.subplot(2,3,5)
  plt.imshow(cv2.cvtColor(img_filtro_rojo, cv2.COLOR_HSV2RGB))
  plt.axis('off')
  plt.title('Imagen con filtro rojo')

  plt.subplot(2,3,6)
  plt.imshow(cv2.cvtColor(img_filtro_verde, cv2.COLOR_HSV2RGB))
  plt.axis('off')
  plt.title('Imagen con filtro verde')

  yellow_count = np.sum(mask_yellow > 0)
  red_count = np.sum(mask_red > 0)
  green_count = np.sum(mask_green > 0)

  print(f"Cantidad de pixeles amarillos: {yellow_count}")
  print(f"Cantidad de pixeles rojos: {red_count}")
  print(f"Cantidad de pixeles verdes: {green_count}")

  if yellow_count > red_count and yellow_count > green_count:
    print("La fruta es un platano")
    print("La fruta esta madura")

  elif red_count > yellow_count and red_count > green_count:
    print("La fruta es un tomate")
    print("La fruta esta madura")

  elif green_count > yellow_count and green_count > red_count:
    print("La fruta no esta madura")

def main():
  hacer_y_plotear_mascaras(img_hsv,img_rgb,img_gray,img)

main()